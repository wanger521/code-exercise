# 题目描述
给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。

请你将两个数相加，并以相同形式返回一个表示和的链表。

你可以假设除了数字 0 之外，这两个数都不会以 0 开头。

输入：l1 = [2,4,3], l2 = [5,6,4]
输出：[7,0,8]
解释：342 + 465 = 807.

（自己的）
# 题目思路
首先注意到是链表结构，python用自定义类模拟链表，先赋初值，然后用递归不断往下累加，用next flow处理进位情况
# 题目解法
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        # initialize
        first_value, next_flow = self.addCal( l1.val, l2.val, 0)
        results = ListNode(val=first_value, next=None)
        l1_next = l1.next
        l2_next = l2.next       
        results_index = results
        while l1_next!=None or l2_next!=None:
            if l1_next!=None and l2_next!=None:
                value, next_flow = self.addCal(l1_next.val, l2_next.val, next_flow)
                l1_next = l1_next.next
                l2_next = l2_next.next
            elif l1_next == None:
                value, next_flow = self.addCal(0, l2_next.val, next_flow)
                l2_next = l2_next.next
            else:
                value, next_flow = self.addCal(l1_next.val, 0, next_flow)
                l1_next = l1_next.next
            results_index.next = ListNode(val=value, next=None)
            results_index = results_index.next
        if next_flow ==1:
            results_index.next = ListNode(val=next_flow, next=None)
        return results
        
    def addCal(self,l1_val,l2_val, next_flow):
        value = l1_val + l2_val + next_flow
        next_flow = 0
        if value >= 10:
            value = value - 10
            next_flow =1 
        return value,next_flow
        
   # 可改进之处
   进位使用 next_flow = value/10来处理比较高效， value = value%10
   判断部分有些冗余，比如可以判断如果l1!=None,则l1=l1.next
