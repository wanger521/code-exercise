# 题目描述
给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。

有效字符串需满足：

左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。

输入：s = "()[]{}"
输出：true

# 解题思路
    第一想到的就是使用栈结构，因为正确字符串的输入一定是对称结构，左括号的就加入栈，遇到右括号就弹出然后对比。
如果有了差错，就说明这个结构不对称，也就是错误输入。当然，正确的输入一定是偶数，也可以在最开始加入一个奇偶的判断，减少后面不必要的执行。

  时间复杂度为O（N），空间复杂度为O（N）。
  
 具体代码如下
 
 class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        # stack
        s_list = list(s)
        s_stack = []
        match = {'}':'{',']':'[',')':'('}
        for i in s_list:
            if match.has_key(i) is False:
                s_stack.append(i)
            else:
                if len(s_stack)==0 or s_stack.pop()!=match[i]:
                    return False
        if len(s_stack)!=0:
            return False
        return True
